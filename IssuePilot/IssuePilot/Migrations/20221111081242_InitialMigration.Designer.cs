// <auto-generated />
using System;
using IssuePilot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IssuePilot.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221111081242_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:IdentityIncrement", 1)
                .HasAnnotation("SqlServer:IdentitySeed", 1)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IssuePilot.Models.DBModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(3001)")
                        .HasMaxLength(3001);

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.NewsEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("ControllerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsEntryCaseId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ReferredUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("NewsEntryCaseId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReferredUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketId");

                    b.ToTable("NewsEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionId = 1,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(3455),
                            NewsEntryCaseId = 0,
                            OwnerId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false
                        },
                        new
                        {
                            Id = 2,
                            ActionId = 4,
                            ControllerId = 2,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4176),
                            NewsEntryCaseId = 6,
                            OwnerId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false
                        },
                        new
                        {
                            Id = 3,
                            ActionId = 4,
                            ControllerId = 2,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4199),
                            NewsEntryCaseId = 6,
                            OwnerId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false
                        },
                        new
                        {
                            Id = 4,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4202),
                            NewsEntryCaseId = 1,
                            OwnerId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 5,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4877),
                            NewsEntryCaseId = 1,
                            OwnerId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 6,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4903),
                            NewsEntryCaseId = 1,
                            OwnerId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 7,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4906),
                            NewsEntryCaseId = 3,
                            OwnerId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 2,
                            Seen = false,
                            StatusId = 1,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 8,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4908),
                            NewsEntryCaseId = 3,
                            OwnerId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 2,
                            Seen = false,
                            StatusId = 1,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 9,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4911),
                            NewsEntryCaseId = 3,
                            OwnerId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 2,
                            Seen = false,
                            StatusId = 1,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 10,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4913),
                            NewsEntryCaseId = 1,
                            OwnerId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 11,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4915),
                            NewsEntryCaseId = 1,
                            OwnerId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 12,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4918),
                            NewsEntryCaseId = 1,
                            OwnerId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 13,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4920),
                            NewsEntryCaseId = 1,
                            OwnerId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 3
                        },
                        new
                        {
                            Id = 14,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4922),
                            NewsEntryCaseId = 1,
                            OwnerId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 3
                        },
                        new
                        {
                            Id = 15,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4925),
                            NewsEntryCaseId = 1,
                            OwnerId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 3
                        },
                        new
                        {
                            Id = 16,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4927),
                            NewsEntryCaseId = 1,
                            OwnerId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 4
                        },
                        new
                        {
                            Id = 17,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4929),
                            NewsEntryCaseId = 1,
                            OwnerId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 4
                        },
                        new
                        {
                            Id = 18,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4931),
                            NewsEntryCaseId = 1,
                            OwnerId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 4
                        },
                        new
                        {
                            Id = 19,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4934),
                            NewsEntryCaseId = 1,
                            OwnerId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 5
                        },
                        new
                        {
                            Id = 20,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4936),
                            NewsEntryCaseId = 1,
                            OwnerId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 5
                        },
                        new
                        {
                            Id = 21,
                            ActionId = 2,
                            ControllerId = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 938, DateTimeKind.Local).AddTicks(4938),
                            NewsEntryCaseId = 1,
                            OwnerId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            ProjectId = 1,
                            ReferredUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RouteId = 1,
                            Seen = false,
                            StatusId = 0,
                            TicketId = 5
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.NewsEntryCase", b =>
                {
                    b.Property<int>("EntryCaseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntryCaseId");

                    b.ToTable("NewsEntryCases");

                    b.HasData(
                        new
                        {
                            EntryCaseId = 0,
                            Name = "NewProject"
                        },
                        new
                        {
                            EntryCaseId = 1,
                            Name = "NewTicket"
                        },
                        new
                        {
                            EntryCaseId = 2,
                            Name = "NewComment"
                        },
                        new
                        {
                            EntryCaseId = 3,
                            Name = "NewStatus"
                        },
                        new
                        {
                            EntryCaseId = 4,
                            Name = "AssignedToTicket"
                        },
                        new
                        {
                            EntryCaseId = 5,
                            Name = "UnassignedFromTicket"
                        },
                        new
                        {
                            EntryCaseId = 6,
                            Name = "AddedToProject"
                        },
                        new
                        {
                            EntryCaseId = 7,
                            Name = "RemovedFromProject"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DeletedTicketsCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(140)")
                        .HasMaxLength(140);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 936, DateTimeKind.Local).AddTicks(2181),
                            CreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            DeletedTicketsCount = 0,
                            Description = "Ein vom System generiertes Project zum Testen.",
                            Title = "Testprojekt"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 936, DateTimeKind.Local).AddTicks(2929),
                            CreatorId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            DeletedTicketsCount = 0,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            Title = "Testprojekt 2: Lorem ipsum dolor sit amet"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.ProjectMemberEntry", b =>
                {
                    b.Property<int>("FK_ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("FK_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectRoleId")
                        .HasColumnType("int");

                    b.HasKey("FK_ProjectId", "FK_UserId");

                    b.HasIndex("FK_UserId");

                    b.HasIndex("ProjectRoleId");

                    b.ToTable("ProjectMemberEntries");

                    b.HasData(
                        new
                        {
                            FK_ProjectId = 1,
                            FK_UserId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            ProjectRoleId = 0
                        },
                        new
                        {
                            FK_ProjectId = 1,
                            FK_UserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            ProjectRoleId = 1
                        },
                        new
                        {
                            FK_ProjectId = 1,
                            FK_UserId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            ProjectRoleId = 0
                        },
                        new
                        {
                            FK_ProjectId = 2,
                            FK_UserId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            ProjectRoleId = 0
                        },
                        new
                        {
                            FK_ProjectId = 2,
                            FK_UserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            ProjectRoleId = 1
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectRoles");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Title = "Member"
                        },
                        new
                        {
                            Id = 1,
                            Title = "Owner"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClosedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(5000);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TicketCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(140)")
                        .HasMaxLength(140);

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClosedByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TicketCreatorId");

                    b.HasIndex("TicketStatusId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(417),
                            Deadline = new DateTime(2023, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(431),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 0,
                            Title = "TestTicket",
                            Weight = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(1211),
                            Description = "Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen. Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 2,
                            Title = "TestTicket 2",
                            Weight = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(1783),
                            Deadline = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(1793),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            TicketStatusId = 1,
                            Title = "TestTicket 3",
                            Weight = 3
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(1810),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            TicketStatusId = 3,
                            Title = "TestTicket 4",
                            Weight = 2
                        },
                        new
                        {
                            Id = 5,
                            CloseDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(1826),
                            ClosedByUserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(1823),
                            Deadline = new DateTime(2022, 11, 13, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(1828),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 4,
                            Title = "TestTicket 5",
                            Weight = 0
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(2516),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 0,
                            Title = "TestTicket 6",
                            Weight = 1
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(2527),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 0,
                            Title = "TestTicket 7",
                            Weight = 1
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(2529),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 0,
                            Title = "TestTicket 8",
                            Weight = 1
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(2532),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 0,
                            Title = "TestTicket 9",
                            Weight = 1
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(2534),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 0,
                            Title = "TestTicket 10",
                            Weight = 1
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(2537),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 0,
                            Title = "TestTicket 11",
                            Weight = 1
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(2539),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 0,
                            Title = "TestTicket 12",
                            Weight = 1
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 937, DateTimeKind.Local).AddTicks(2541),
                            Description = "Ein vom System generiertes Ticket zum Testen.",
                            ProjectId = 1,
                            TicketCreatorId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            TicketStatusId = 0,
                            Title = "TestTicket 13",
                            Weight = 1
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketAssignee", b =>
                {
                    b.Property<int>("FK_TicketId")
                        .HasColumnType("int");

                    b.Property<string>("FK_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FK_TicketId", "FK_UserId");

                    b.HasIndex("FK_UserId");

                    b.ToTable("TicketAssignees");
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TicketCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bug",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Frage",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dokumentation",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Diskussion",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Feature",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bug",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Frage",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dokumentation",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Diskussion",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Feature",
                            ProjectId = 2
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntryCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferredUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TicketHistoryEntryCaseId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntryCreatorId");

                    b.HasIndex("ReferredUserId");

                    b.HasIndex("TicketHistoryEntryCaseId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketHistoryEntries");
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketHistoryEntryCase", b =>
                {
                    b.Property<int>("EntryCaseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntryCaseId");

                    b.ToTable("TicketHistoryEntryCases");

                    b.HasData(
                        new
                        {
                            EntryCaseId = 0,
                            Name = "MemberAssigned"
                        },
                        new
                        {
                            EntryCaseId = 1,
                            Name = "MemberUnassigned"
                        },
                        new
                        {
                            EntryCaseId = 2,
                            Name = "TicketClosed"
                        },
                        new
                        {
                            EntryCaseId = 3,
                            Name = "TicketOpened"
                        },
                        new
                        {
                            EntryCaseId = 4,
                            Name = "TicketCanceled"
                        },
                        new
                        {
                            EntryCaseId = 5,
                            Name = "TicketPaused"
                        },
                        new
                        {
                            EntryCaseId = 6,
                            Name = "TicketInProgress"
                        },
                        new
                        {
                            EntryCaseId = 7,
                            Name = "CommentAdded"
                        },
                        new
                        {
                            EntryCaseId = 8,
                            Name = "CommentDeleted"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketProjectCategory", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("TicketCategoryId")
                        .HasColumnType("int");

                    b.HasKey("TicketId", "TicketCategoryId");

                    b.HasIndex("TicketCategoryId");

                    b.ToTable("TicketProjectCategories");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            TicketId = 2,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            TicketId = 2,
                            TicketCategoryId = 1
                        },
                        new
                        {
                            TicketId = 3,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            TicketId = 4,
                            TicketCategoryId = 3
                        },
                        new
                        {
                            TicketId = 5,
                            TicketCategoryId = 4
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 1,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Paused"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "860d3d4b-cc52-4ff0-b249-8c3656177641",
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 907, DateTimeKind.Local).AddTicks(4174),
                            Email = "Admin@Admin.com",
                            EmailConfirmed = true,
                            Firstname = "Admin",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELUB6YwaTKyNRtILr6OP9t0h4J7L6KSJdEkWOpVsq/cycstlv2zJ/Kk9zs/xrKF+cg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ab495b7-a089-4bd0-b57d-5e4baccc28f4",
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 919, DateTimeKind.Local).AddTicks(1369),
                            EmailConfirmed = true,
                            Firstname = "Demo",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "DEMO-MANAGER",
                            PasswordHash = "AQAAAAEAACcQAAAAELtG5CLi5uCArouczpEAIVm+qWoE5aZDiiRfmkLBNDwESnhMEGyZ9NSVm2OzV4ZD1g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            Surname = "Manager",
                            TwoFactorEnabled = false,
                            UserName = "Demo-Manager"
                        },
                        new
                        {
                            Id = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdbc7c99-6b06-4f7c-a4d7-48fff9d5076f",
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 924, DateTimeKind.Local).AddTicks(4911),
                            EmailConfirmed = true,
                            Firstname = "Demo",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "DEMO-BENUTZER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPxXNft5pE+YA+hWspZFnM2oSuZ7mj49grqrKwbXlg1AjSZnNxZ/D3e1gzsF6vXGRQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            Surname = "Benutzer",
                            TwoFactorEnabled = false,
                            UserName = "Demo-Benutzer"
                        },
                        new
                        {
                            Id = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22cd9460-d0e2-431f-a9cc-8598cc157312",
                            CreateDate = new DateTime(2022, 11, 11, 9, 12, 41, 929, DateTimeKind.Local).AddTicks(8277),
                            Email = "demoadmin@Admin.com",
                            EmailConfirmed = false,
                            Firstname = "Demo",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMOADMIN@ADMIN.COM",
                            NormalizedUserName = "DEMO-ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELKR1L5L3W4RjeU7WYbengP+qFS2BD7U+fsgg0mAB0aVfuD4fcCOWa6sYCiZiqYLaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "Demo-Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            ConcurrencyStamp = "771f9501-1de4-4f61-9a62-7a0087a0d4b7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            ConcurrencyStamp = "0ddf905f-8be3-4325-9612-3e13b5fceb4e",
                            Name = "Projektmanager",
                            NormalizedName = "PROJEKTMANAGER"
                        },
                        new
                        {
                            Id = "78A7570F-3CE5-48BA-9461-80283ED1D94D",
                            ConcurrencyStamp = "ea6156b5-c8cc-491a-ad8b-5f4b15f17c00",
                            Name = "Benutzer",
                            NormalizedName = "BENUTZER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E1"
                        },
                        new
                        {
                            UserId = "92d45cb7-746e-46d2-ad7b-ddc551eb1ef1",
                            RoleId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3"
                        },
                        new
                        {
                            UserId = "e28b8357-2955-4f3c-9c3d-1ec6ab1f4335",
                            RoleId = "78A7570F-3CE5-48BA-9461-80283ED1D94D"
                        },
                        new
                        {
                            UserId = "B22698B8-42A2-4115-9631-1C2D1E2AC5C5",
                            RoleId = "2301D884-221A-4E7D-B509-0113DCC043E1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.Comment", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("IssuePilot.Models.DBModels.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.Image", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.Ticket", "Ticket")
                        .WithMany("Images")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.NewsEntry", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.Comment", "Comment")
                        .WithMany("NewsEntries")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IssuePilot.Models.DBModels.NewsEntryCase", "NewsEntryCase")
                        .WithMany("NewsEntries")
                        .HasForeignKey("NewsEntryCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.DBModels.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("IssuePilot.Models.DBModels.Project", "Project")
                        .WithMany("NewsEntries")
                        .HasForeignKey("ProjectId");

                    b.HasOne("IssuePilot.Models.DBModels.User", "ReferredUser")
                        .WithMany()
                        .HasForeignKey("ReferredUserId");

                    b.HasOne("IssuePilot.Models.DBModels.TicketStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("IssuePilot.Models.DBModels.Ticket", "Ticket")
                        .WithMany("NewsEntries")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.Project", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.User", "Creator")
                        .WithMany("Projects")
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.ProjectMemberEntry", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.Project", "Project")
                        .WithMany("ProjectMemberEntries")
                        .HasForeignKey("FK_ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.DBModels.User", "User")
                        .WithMany("ProjectMemberEntries")
                        .HasForeignKey("FK_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.DBModels.ProjectRole", "ProjectRole")
                        .WithMany("ProjectMemberEntries")
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.Ticket", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.User", "ClosedByUser")
                        .WithMany("ClosedTickets")
                        .HasForeignKey("ClosedByUserId");

                    b.HasOne("IssuePilot.Models.DBModels.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.DBModels.User", "TicketCreator")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("TicketCreatorId");

                    b.HasOne("IssuePilot.Models.DBModels.TicketStatus", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketAssignee", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.Ticket", "Ticket")
                        .WithMany("TicketAssignees")
                        .HasForeignKey("FK_TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.DBModels.User", "User")
                        .WithMany("TicketAssignees")
                        .HasForeignKey("FK_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketCategory", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.Project", "Project")
                        .WithMany("TicketCategories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketHistoryEntry", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.User", "EntryCreator")
                        .WithMany()
                        .HasForeignKey("EntryCreatorId");

                    b.HasOne("IssuePilot.Models.DBModels.User", "ReferredUser")
                        .WithMany()
                        .HasForeignKey("ReferredUserId");

                    b.HasOne("IssuePilot.Models.DBModels.TicketHistoryEntryCase", "TicketHistoryEntryCase")
                        .WithMany("TicketHistoryEntries")
                        .HasForeignKey("TicketHistoryEntryCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.DBModels.Ticket", "Ticket")
                        .WithMany("TicketHistoryEntries")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePilot.Models.DBModels.TicketProjectCategory", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.TicketCategory", "TicketCategory")
                        .WithMany("TicketProjectCategories")
                        .HasForeignKey("TicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.DBModels.Ticket", "Ticket")
                        .WithMany("TicketProjectCategories")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssuePilot.Models.DBModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IssuePilot.Models.DBModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
